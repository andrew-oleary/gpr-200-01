//GPR 200-01
//Andrew O'Leary
//Lab3


// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    //size of pixel in the resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}
// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane

//x · (1 - a)+ y · a
//(1−t)⋅startValue+t⋅endValue


const float pi = 3.1415926535897932385;
float degrees_to_radians(float degrees) {
    return (degrees * pi / 180.0);
}
float Random_float()
{
    return fract(sin(dot(0.0, 1.0)));
}

float infinity = 1.0/0.0;



struct sRay
{
    vec4 origin;
    vec4 direction;
};
//no overrides
/*struct hit_record {
    vec4 p;
    vec4 normal;
    float t;
};*/
//sphere
struct sSphere
{
vec4 center;
float radius;
//vec4 p;
//vec4 normal;
//float t;
//bool front_face;
};
//sphere hittable 
struct sHittableS
{
vec4 p;
vec4 normal;
float t;
bool front_face;
};
//set new sphere
sSphere newSphere(vec3 center, float radius)
{
sSphere sphere;
sphere.center=vec4(center,1.0);
sphere.radius=radius;
return sphere;

}


//hit_record bool hit(in sRay ray,in float t_min,in float t_max,
//out hit_record rec) const = 0;

sRay newRay(in vec3 origin, in vec3 direction)
{
    sRay ray;
    ray.origin= vec4(origin,1.0);
    ray.direction=vec4(direction,0.0);
    return ray;
}

vec4 atRay(in sRay ray,in float t)
{
    //retunr orig + t*dir;
    return(ray.direction * t +ray.origin);
}
//hit_sphere: test if ray hits shpere
/*float hit_sphere(in vec3 center, float radius, in sRay ray) 
{
    vec4 oc = ray.origin - vec4(center,1.0);
    float a = length(ray.direction)*length(ray.direction);
    float half_b = 2.0 * dot(oc, ray.direction);
    float c = length(oc)*length(oc)- radius*radius;
    float discriminant = half_b*half_b - a*c;
    if (discriminant < 0.0) {
        return -1.0;
    } else {
        return (-half_b - sqrt(discriminant) ) / (a);
    }
}*/

void sphere_set_face_normal(sRay ray,vec4 outward_normal,sHittableS hittableS) 
{
        hittableS.front_face = dot(ray.direction, outward_normal) < 0.0;
        if(hittableS.front_face)
        {
        hittableS.normal=outward_normal;
        }
        else
        {
        hittableS.normal=-outward_normal;
        }
}
//check if ray hit the sphere usinf
bool hit_Sphere(in sRay ray,in float t_min,in float t_max, sSphere sphere,sHittableS hittableS)
{
vec4 oc = (ray.origin - sphere.center);
    float a = length(ray.direction)*length(ray.direction);
    float half_b = dot(oc, ray.direction);
    float c = (length(oc)*length(oc))- (sphere.radius*sphere.radius);
    float discriminant = half_b*half_b - a*c;
    if (discriminant < 0.0) return false;
    float sqrtd= sqrt(discriminant);
    // Find the nearest root that lies in the acceptable range.
    float root = (-half_b - sqrtd) / a;
    if (root < t_min || t_max < root) {
        root = (-half_b + sqrtd) / a;
        if (root < t_min || t_max < root)
            return false;
    }
    //
    hittableS.t = root;
    hittableS.p = vec4(atRay(ray,hittableS.t));
    vec4 outward_normal = (hittableS.p - sphere.center) / sphere.radius;
    sphere_set_face_normal(ray,outward_normal,hittableS);

    return true;
}
// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in sRay ray,in sSphere sphere1,in sSphere sphere2)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    // -> what does the ray look like as color?
    sHittableS hittableS;
    vec4 color=vec4 (0.0);
    if (hit_Sphere( ray, 0.0,infinity,sphere1,hittableS )) {
        //color+=0.5 * (hittableS.normal + vec4(1.0,1.0,1.0,1.0));
        //return color;
        return 0.5 * (hittableS.normal + vec4(1.0,1.0,1.0,1.0));
        //the normal is blank 
    }//sphere normal not being set 
    if (hit_Sphere( ray, 0.0,infinity,sphere2,hittableS )) {
       // color+=0.5 * (hittableS.normal + vec4(1.0,1.0,1.0,1.0));
        //return color;
        return 0.5 * (hittableS.normal + vec4(1.0,1.0,1.0,1.0));
    }
    
    /*if (t > 0.0) {
        vec4 N = vec4(atRay(ray,t) - vec4(0.0,0.0,-1.0,1.0));
        return vec4(0.5*vec3(N.x+1.0, N.y+1.0, N.z+1.0),1.0);
        
    }*/
    //5.2
    //if (hit_sphere(vec3(0,0,-1), 0.5, ray))
        //return vec4(1.0, 0.0, 0.0,1.0);
    //4.0
    float t = (0.5*ray.direction.y+1.0);
    //color+=vec4(mix(vec3(1.0, 1.0, 1.0),vec3(0.5, 0.7, 1.0),t),1.0);
    //return color;
    return vec4(mix(vec3(1.0, 1.0, 1.0),vec3(0.5, 0.7, 1.0),t),1.0);//MIX does the blend
}
//
void calcRay(//out vec4 rayDirection, out vec4 rayOrigin,
             out sRay ray,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
        //rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    //rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
    // explicit
    ray = newRay(vec3(0.0),vec3(viewport,-focalLength));
}




void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    //vec4 rayDirection, rayOrigin;
    sRay ray; 
    ray=newRay(vec3(0.0,0.0,0.0),vec3(0.0,0.0,0.0));
    //spheres
    sSphere sphere1;
    sSphere sphere2;
    sphere1=newSphere(vec3(0.0,0.0,-1.0),-0.5);
    sphere2=newSphere(vec3(1.0,-100.5,-1.0),100.0);
    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(ray,
            viewport, focalLength);

    // color
    fragColor = calcColor(ray,sphere1,sphere2);
  //fragColor = vec4(sphere1.t,0.0,0.0,1.0);

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}